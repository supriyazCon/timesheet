// import { v4 as uuidv4 } from 'uuid';
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { Box, Grid } from '@mui/material';
import ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';
import CloseIcon from '@mui/icons-material/Close';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { COMPONENTS } from '../../Utils/Constants';
import RenderComponents from '../RenderComponents/RenderComponents';
// import { CLIENT_DETAILS } from '../../Redux/Constants';
import { addClientData, updateClientData } from '../../Services/clientServices';
import { ROUTES } from '../../Routes/Paths';
import { BILLING_METHOD, CURRENCIES } from '../../Utils/DataConstants';
import './AddClient.scss';
import { addClient, editClient } from '../../Redux/clients';
import ReusableSnackbar from '../../common/ReusableSnackbar';

const validationSchema = Yup.object().shape({
  clientName: Yup.string().required('Client name is required.'),
  currencyId: Yup.string().required('Currency is required.'),
  billingMethodId: Yup.string().required('Billing Method is required.'),
  emailId: Yup.string().email('Invalid email address.'),
  firstName: Yup.string(),
  lastName: Yup.string(),
  phone: Yup.string().matches(/^\d+$/, 'Phone number must contain only digits.').max(10, 'Phone number must be at most 10 digits.'),
  mobile: Yup.string().matches(/^\d+$/, 'Mobile number must contain only digits.')
});


function AddClient() {
  // const uniqueId = uuidv4();
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const { TEXT_FIELD, SELECT_BOX, BUTTON, TYPOGRAPHY, ICON } = COMPONENTS;
  const { CLIENTS } = ROUTES;
  const [isUpdate, setIsUpdate] = useState(false);
  const [emptyPayload, setEmptyPayload] = useState({
    clientName: '',
    currencyId: '',
    billingMethodId: '',
    createdBy: 1,
    updatedBy: 1,
    // isActive: true,
    createdDate: new Date(),
    updatedDate: new Date(),
    emailId: '',
    firstName: '',
    lastName: '',
    phone: '',
    mobile: '',
    fax: ''
  });
  const [payload, setPayload] = useState({ ...emptyPayload });

  const updatePayload = (pairs) => setPayload((prevPayload) => ({ ...prevPayload, ...pairs }));

  const [snackbarOpen, setSnackbarOpen] = useState(false);
  // const [snackbarMessage, setSnackbarMessage] = useState('');
  // const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const addClientError = useSelector(state => state.addClient.error)
  const addClientData = useSelector(state => state.addClient.data)
  const editClientData = useSelector(state => state.editClient?.data)



  // Function to handle Snackbar close event
  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setSnackbarOpen(false);
  };

  // const handleActionDispatch = (type, data = []) => dispatch({ type, data });

  const clientLabels = [
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        whiteSPace: 'nowrap'
      },
      isRequired: true,
      key: 'clientLabel',
      label: 'Client Name',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      isRequired: true,
      key: 'currencyLabel',
      label: 'Currency',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'billingMethodLabel',
      label: 'Billing Method',
      columnWidth: 3.5
    }
  ];

  const contactsLabels = [
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end'
      },
      key: 'emailIdLabel',
      label: 'EmailId',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'firstNameLabel',
      label: 'First Name',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'lastNameLabel',
      label: 'Last Name',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'phoneLabel',
      label: 'Phone',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'mobileLabel',
      label: 'Mobile',
      columnWidth: 3
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'end',
        marginTop: '0.8rem'
      },
      key: 'faxLabel',
      label: 'Fax',
      columnWidth: 3
    }
  ];

  const clientInputs = [
    {
      control: TEXT_FIELD,
      key: 'clientName',
      variant: 'standard',
      label: 'Client',
      columnWidth: 6
    },
    {
      control: SELECT_BOX,
      select: true,
      variant: 'standard',
      groupStyle: { marginTop: '1rem' },
      key: 'currencyId',
      label: 'currency',
      options: CURRENCIES,
      isSelecteAllAllow: false,
      columnWidth: 6
    },
    {
      control: SELECT_BOX,
      select: true,
      variant: 'standard',
      groupStyle: { marginTop: '1rem' },
      key: 'billingMethodId',
      label: 'Billing Method',
      options: BILLING_METHOD,
      isSelecteAllAllow: false,
      columnWidth: 6
    }
  ];

  const contactsInputs = [
    {
      control: TEXT_FIELD,
      // groupStyle: { marginTop: '1rem' },
      key: 'emailId',
      variant: 'standard',
      label: 'EmailId',
      columnWidth: 6
    },
    {
      control: TEXT_FIELD,
      groupStyle: { marginTop: '1rem' },
      key: 'firstName',
      variant: 'standard',
      label: 'First Name',
      columnWidth: 6
    },
    {
      control: TEXT_FIELD,
      groupStyle: { marginTop: '1rem' },
      key: 'lastName',
      variant: 'standard',
      label: 'Last Name',
      columnWidth: 6
    },
    {
      control: TEXT_FIELD,
      groupStyle: { marginTop: '1rem' },
      key: 'phone',
      variant: 'standard',
      label: 'Phone',
      columnWidth: 6
    },
    {
      control: TEXT_FIELD,
      groupStyle: { marginTop: '1rem' },
      key: 'mobile',
      variant: 'standard',
      label: 'Mobile',
      columnWidth: 6
    },
    {
      control: TEXT_FIELD,
      groupStyle: { marginTop: '1rem' },
      key: 'fax',
      variant: 'standard',
      label: 'Fax',
      columnWidth: 6
    }
  ];

  const actionButtons = [
    {
      control: BUTTON,
      groupStyle: { marginRight: '1rem' },
      btnTitle: 'Submit',
      handleClickButton: () => handleAddClient(payload, { setSubmitting: () => {} }),
      columnWidth: 0.8
    },
    {
      control: BUTTON,
      // groupStyle: { marginRight: '1rem' },
      btnTitle: 'Cancel',
      handleClickButton: () => null,
      columnWidth: 0.8
    }
  ];

  const topComponents = [
    {
      control: ICON,
      iconName: <ArrowBackIosIcon />,
      color: 'primary',
      handleClickIcon: () => navigate(CLIENTS),
      columnWidth: 0.5
    },
    {
      control: TYPOGRAPHY,
      groupStyle: {
        height: '3rem',
        display: 'flex',
        justifyContent: 'flex-start'
      },
      key: 'addClientLabel',
      label: 'Add Client',
      columnWidth: 1
    },
    {
      control: ICON,
      iconName: <CloseIcon />,
      groupStyle: { position: 'absolute', right: '1rem' },
      color: 'error',
      handleClickIcon: () => navigate(CLIENTS),
      columnWidth: 0.5
    }
  ];

  const handleAddClient = async (values, { setSubmitting }) => {
    if (!setSubmitting) return; // Check for invalid submission
    const data = values;
    if (isUpdate) {
      dispatch(editClient(data));
    } else {
      dispatch(addClient(data));
    }
    setSubmitting(false);
    setSnackbarOpen(true);
    updatePayload(emptyPayload);
    setTimeout(() => {
      navigate(CLIENTS);
    }, 2000);
  };
  




  const handleChangeData = (key, val, ind) => {
    if (key) {
      const updateFields = { [key]: val };
      if (key === 'currencyId' || key === 'billingMethodId') {
        updateFields[key] = val.toString();
      }
      updatePayload({ ...updateFields });
    }
    if (key) {
      const updateFields = { [key]: val };
      if (key === 'mobile') {
        updateFields.mobile = parseInt(val, 10);
      } else if (key === 'phone') {
        updateFields.phone = parseInt(val, 10);
      } else {
        updateFields[key] = val;
      }
      updatePayload({ ...updateFields });
    }
  };

  useEffect(() => {
    // console.log('locationState', location?.state);
    if (location?.state) {
      updatePayload(location?.state);
      setIsUpdate(true);
    }
  }, [location?.state]);


  let snackbarMessage;
  // if (addClientData === null && editClientData === null) {
  //   snackbarMessage = 'Something went wrong. Please try again.';
  // } else
  if (isUpdate && editClientData !== null) {
    snackbarMessage = 'Client updated successfully.';
  } else if (!isUpdate && addClientData !== null) {
    snackbarMessage = 'Client added successfully.';
  } else {
    snackbarMessage = 'Something went wrong. Please try again.';
  }

  return (
    <Formik
      initialValues={payload}
      validationSchema={validationSchema}
      onSubmit={(values, { setSubmitting }) => handleAddClient(values, setSubmitting)}
    >
      {({ values, handleChange, errors, touched, isSubmitting }) => (
        <Form>
          {console.log(errors)}
          <Grid container spacing={2}>
            <ReusableSnackbar
              open={snackbarOpen}
              message={snackbarMessage}
              severity={addClientData == null && editClientData === null ? 'error' : 'success'}
              handleClose={handleSnackbarClose}
            />
            <Grid container spacing={2}>
              <ReusableSnackbar
                open={snackbarOpen}
                message={snackbarMessage}
                severity={addClientData == null && editClientData === null ? 'error' : 'success'}
                handleClose={handleSnackbarClose}
              />

              <Grid
                item
                xs={12}
                style={{
                  backgroundColor: '#f9fafc',
                  display: 'flex',
                  justifyContent: 'flex-start',
                  alignItems: 'center',
                  borderBottom: '1px solid #e9e9e9'
                }}
              >
                {topComponents?.map((comp, ind) => (
                  <RenderComponents key={ind} metaData={comp} ind={ind} />
                ))}
              </Grid>
              <Grid item xs={12} style={{ height: '32rem', overflowY: 'scroll', whiteSpace: 'nowrap' }}>
                <Box style={{ padding: '1.5rem', backgroundColor: 'white' }}>
                  <Grid container spacing={1}>
                    <Grid item xs={12} style={{ paddingLeft: '0.8rem' }}>
                      <RenderComponents
                        metaData={{
                          control: TYPOGRAPHY,
                          label: 'Client',
                          labelStyle: { fontWeight: 'bold' }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} style={{ display: 'flex' }}>
                      <Grid item xs={4} style={{ paddingLeft: '1.5rem' }}>
                        {clientLabels?.map((comp, ind) => (
                          <RenderComponents key={ind} metaData={comp} ind={ind} />
                        ))}
                      </Grid>
                      <Grid item xs={8}>
                        {clientInputs?.map((comp, ind) => (
                          <RenderComponents
                            key={ind}
                            metaData={comp}
                            ind={ind}
                            payload={payload}
                            handleChange={handleChangeData}
                          />
                        ))}
                      </Grid>
                    </Grid>
                  </Grid>
                  <Grid container spacing={1} mt={2}>
                    <Grid item xs={12} style={{ paddingLeft: '0.8rem' }}>
                      <RenderComponents
                        metaData={{
                          control: TYPOGRAPHY,
                          label: 'Contacts',
                          labelStyle: { fontWeight: 'bold' }
                        }}
                      />
                    </Grid>
                    <Grid item xs={12} style={{ display: 'flex' }}>
                      <Grid item xs={4} style={{ paddingLeft: '1.5rem' }}>
                        {contactsLabels?.map((comp, ind) => (
                          <RenderComponents key={ind} metaData={comp} ind={ind} />
                        ))}
                      </Grid>
                      <Grid item xs={8}>
                        {contactsInputs?.map((comp, ind) => (
                          <RenderComponents
                            key={ind}
                            metaData={comp}
                            ind={ind}
                            payload={payload}
                            handleChange={handleChangeData}
                          />
                        ))}
                      </Grid>
                    </Grid>
                  </Grid>
                </Box>
              </Grid>
              <Grid
                item
                xs={12}
                style={{
                  display: 'flex',
                  justifyContent: 'flex-start',
                  alignItems: 'center',
                  padding: '1rem',
                  backgroundColor: '#f9fafc',
                  position: 'fixed',
                  bottom: 0,
                  width: '100%',
                  borderTop: '1px solid #e9e9e9'
                }}
              >
                {actionButtons?.map((comp, ind) => (
                  <RenderComponents key={ind} metaData={comp} ind={ind} />
                ))}
              </Grid>
            </Grid>

          </Grid>
        </Form>
      )}
    </Formik>
  );
}

export default AddClient;
